
type TranslationConfig {
  id: ID!
  url: String!
  targetLanguage: Language
  sourceLanguage: Language
  translationModel: TranslationModel
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  translationConfigTargetLanguageCode: String
  translationConfigSourceLanguageCode: String
}

type BlogPost {
  id: ID!
  originalPost: BlogPost
  language: Language!
  title: String!
  authors: [String]!
  content: [String]
  translationModel: TranslationModel
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  blogPostOriginalPostId: ID
  blogPostLanguageCode: String!
  blogPostTranslationModelId: ID
}

type Language {
  name: String!
  code: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type TranslationModel {
  id: ID!
  name: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTranslationConfigConnection {
  items: [TranslationConfig]!
  nextToken: String
}

input ModelTranslationConfigFilterInput {
  id: ModelIDInput
  url: ModelStringInput
  and: [ModelTranslationConfigFilterInput]
  or: [ModelTranslationConfigFilterInput]
  not: ModelTranslationConfigFilterInput
  translationConfigTargetLanguageCode: ModelStringInput
  translationConfigSourceLanguageCode: ModelStringInput
}

type Query {
  getTranslationConfig(id: ID!): TranslationConfig
  listTranslationConfigs(filter: ModelTranslationConfigFilterInput, limit: Int, nextToken: String): ModelTranslationConfigConnection
  getBlogPost(id: ID!): BlogPost
  listBlogPosts(filter: ModelBlogPostFilterInput, limit: Int, nextToken: String): ModelBlogPostConnection
  getLanguage(code: String!): Language
  listLanguages(code: String, filter: ModelLanguageFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelLanguageConnection
  getTranslationModel(id: ID!): TranslationModel
  listTranslationModels(filter: ModelTranslationModelFilterInput, limit: Int, nextToken: String): ModelTranslationModelConnection
}

input ModelTranslationConfigConditionInput {
  url: ModelStringInput
  and: [ModelTranslationConfigConditionInput]
  or: [ModelTranslationConfigConditionInput]
  not: ModelTranslationConfigConditionInput
  translationConfigTargetLanguageCode: ModelStringInput
  translationConfigSourceLanguageCode: ModelStringInput
}

input CreateTranslationConfigInput {
  id: ID
  url: String!
  translationConfigTargetLanguageCode: String
  translationConfigSourceLanguageCode: String
}

input UpdateTranslationConfigInput {
  id: ID!
  url: String
  translationConfigTargetLanguageCode: String
  translationConfigSourceLanguageCode: String
}

input DeleteTranslationConfigInput {
  id: ID!
}

type Mutation {
  createTranslationConfig(input: CreateTranslationConfigInput!, condition: ModelTranslationConfigConditionInput): TranslationConfig
  updateTranslationConfig(input: UpdateTranslationConfigInput!, condition: ModelTranslationConfigConditionInput): TranslationConfig
  deleteTranslationConfig(input: DeleteTranslationConfigInput!, condition: ModelTranslationConfigConditionInput): TranslationConfig
  createBlogPost(input: CreateBlogPostInput!, condition: ModelBlogPostConditionInput): BlogPost
  updateBlogPost(input: UpdateBlogPostInput!, condition: ModelBlogPostConditionInput): BlogPost
  deleteBlogPost(input: DeleteBlogPostInput!, condition: ModelBlogPostConditionInput): BlogPost
  createLanguage(input: CreateLanguageInput!, condition: ModelLanguageConditionInput): Language
  updateLanguage(input: UpdateLanguageInput!, condition: ModelLanguageConditionInput): Language
  deleteLanguage(input: DeleteLanguageInput!, condition: ModelLanguageConditionInput): Language
  createTranslationModel(input: CreateTranslationModelInput!, condition: ModelTranslationModelConditionInput): TranslationModel
  updateTranslationModel(input: UpdateTranslationModelInput!, condition: ModelTranslationModelConditionInput): TranslationModel
  deleteTranslationModel(input: DeleteTranslationModelInput!, condition: ModelTranslationModelConditionInput): TranslationModel
}

input ModelSubscriptionTranslationConfigFilterInput {
  id: ModelSubscriptionIDInput
  url: ModelSubscriptionStringInput
  and: [ModelSubscriptionTranslationConfigFilterInput]
  or: [ModelSubscriptionTranslationConfigFilterInput]
}

type Subscription {
  onCreateTranslationConfig(filter: ModelSubscriptionTranslationConfigFilterInput): TranslationConfig @aws_subscribe(mutations: ["createTranslationConfig"])
  onUpdateTranslationConfig(filter: ModelSubscriptionTranslationConfigFilterInput): TranslationConfig @aws_subscribe(mutations: ["updateTranslationConfig"])
  onDeleteTranslationConfig(filter: ModelSubscriptionTranslationConfigFilterInput): TranslationConfig @aws_subscribe(mutations: ["deleteTranslationConfig"])
  onCreateBlogPost(filter: ModelSubscriptionBlogPostFilterInput): BlogPost @aws_subscribe(mutations: ["createBlogPost"])
  onUpdateBlogPost(filter: ModelSubscriptionBlogPostFilterInput): BlogPost @aws_subscribe(mutations: ["updateBlogPost"])
  onDeleteBlogPost(filter: ModelSubscriptionBlogPostFilterInput): BlogPost @aws_subscribe(mutations: ["deleteBlogPost"])
  onCreateLanguage(filter: ModelSubscriptionLanguageFilterInput): Language @aws_subscribe(mutations: ["createLanguage"])
  onUpdateLanguage(filter: ModelSubscriptionLanguageFilterInput): Language @aws_subscribe(mutations: ["updateLanguage"])
  onDeleteLanguage(filter: ModelSubscriptionLanguageFilterInput): Language @aws_subscribe(mutations: ["deleteLanguage"])
  onCreateTranslationModel(filter: ModelSubscriptionTranslationModelFilterInput): TranslationModel @aws_subscribe(mutations: ["createTranslationModel"])
  onUpdateTranslationModel(filter: ModelSubscriptionTranslationModelFilterInput): TranslationModel @aws_subscribe(mutations: ["updateTranslationModel"])
  onDeleteTranslationModel(filter: ModelSubscriptionTranslationModelFilterInput): TranslationModel @aws_subscribe(mutations: ["deleteTranslationModel"])
}

type ModelBlogPostConnection {
  items: [BlogPost]!
  nextToken: String
}

input ModelBlogPostFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  authors: ModelStringInput
  content: ModelStringInput
  and: [ModelBlogPostFilterInput]
  or: [ModelBlogPostFilterInput]
  not: ModelBlogPostFilterInput
  blogPostOriginalPostId: ModelIDInput
  blogPostLanguageCode: ModelStringInput
  blogPostTranslationModelId: ModelIDInput
}

input ModelBlogPostConditionInput {
  title: ModelStringInput
  authors: ModelStringInput
  content: ModelStringInput
  and: [ModelBlogPostConditionInput]
  or: [ModelBlogPostConditionInput]
  not: ModelBlogPostConditionInput
  blogPostOriginalPostId: ModelIDInput
  blogPostLanguageCode: ModelStringInput
  blogPostTranslationModelId: ModelIDInput
}

input CreateBlogPostInput {
  id: ID
  title: String!
  authors: [String]!
  content: [String]
  blogPostOriginalPostId: ID
  blogPostLanguageCode: String!
  blogPostTranslationModelId: ID
}

input UpdateBlogPostInput {
  id: ID!
  title: String
  authors: [String]
  content: [String]
  blogPostOriginalPostId: ID
  blogPostLanguageCode: String
  blogPostTranslationModelId: ID
}

input DeleteBlogPostInput {
  id: ID!
}

input ModelSubscriptionBlogPostFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  authors: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  and: [ModelSubscriptionBlogPostFilterInput]
  or: [ModelSubscriptionBlogPostFilterInput]
}

type ModelLanguageConnection {
  items: [Language]!
  nextToken: String
}

input ModelLanguageFilterInput {
  name: ModelStringInput
  code: ModelStringInput
  and: [ModelLanguageFilterInput]
  or: [ModelLanguageFilterInput]
  not: ModelLanguageFilterInput
}

input ModelLanguageConditionInput {
  name: ModelStringInput
  and: [ModelLanguageConditionInput]
  or: [ModelLanguageConditionInput]
  not: ModelLanguageConditionInput
}

input CreateLanguageInput {
  name: String!
  code: String!
}

input UpdateLanguageInput {
  name: String
  code: String!
}

input DeleteLanguageInput {
  code: String!
}

input ModelSubscriptionLanguageFilterInput {
  name: ModelSubscriptionStringInput
  code: ModelSubscriptionStringInput
  and: [ModelSubscriptionLanguageFilterInput]
  or: [ModelSubscriptionLanguageFilterInput]
}

type ModelTranslationModelConnection {
  items: [TranslationModel]!
  nextToken: String
}

input ModelTranslationModelFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  and: [ModelTranslationModelFilterInput]
  or: [ModelTranslationModelFilterInput]
  not: ModelTranslationModelFilterInput
}

input ModelTranslationModelConditionInput {
  name: ModelStringInput
  and: [ModelTranslationModelConditionInput]
  or: [ModelTranslationModelConditionInput]
  not: ModelTranslationModelConditionInput
}

input CreateTranslationModelInput {
  id: ID
  name: String!
}

input UpdateTranslationModelInput {
  id: ID!
  name: String
}

input DeleteTranslationModelInput {
  id: ID!
}

input ModelSubscriptionTranslationModelFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  and: [ModelSubscriptionTranslationModelFilterInput]
  or: [ModelSubscriptionTranslationModelFilterInput]
}

